package lottons.leecode.maxsequare;

public class Solution {
    public static void main(String[] args) {
        char[][] matrix = {{1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}};
        Solution s = new Solution();
//        s.maximalSquare(matrix);
        char[][] matrix1 = {{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 0}, {1, 1, 1, 1, 1, 1, 1, 0}, {1, 1, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 1, 1, 0, 0, 0}};
        s.maximalSquare(matrix1);
    }

    public int maximalSquare(char[][] matrix) {
        int r = 0;
        char[][] result = matrix;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                int maxLength = 0;
                while (true) {
                    System.out.println("i:" + i + ", j: " + j + ", maxLength: " + maxLength);
                    if (i + maxLength < matrix.length && j + maxLength < matrix[i].length && matrix[i + maxLength][j] == 1 && matrix[i][j + maxLength] == 1) {
//                        r = Math.max(r, (maxLength + 1) * (maxLength + 1));
                        result[i][j] = (char) ((maxLength + 1) * (maxLength + 1));
                    } else {
                        int tmp = doit(i, j, maxLength, matrix);
                        r = Math.max(r, tmp);
                        result[i][j] = (char) tmp;
                        break;
                    }
                    maxLength += 1;
                }
            }
        }

        return r;
    }

    private int doit(int i, int j, int maxLength, char[][] matrix) {
        // 已经求出了以[i,j]为顶点的最大正方形矩阵的边长，但是有可能不是实际的边长
        // 根据顶点和边长判断该正方形内是否有等于0的点，根据这个点来确定实际的边长
        int m = i + 1;
        int n = j + 1;
        int length = maxLength - 1;
        boolean flag = true;
        int x = 1;

        // 需要循环的层数
        for (int l = 1; l < maxLength; l++) {
            // 每层循环的个数
            for (int k = 0; k < maxLength - l; k++) {
                if (matrix[m + k][n] == 0 || matrix[m][n + k] == 0) {
                    System.out.println("l: " + l);
                    return l * l;
                }
            }

        }

//        while (length >= 0 && flag && m < matrix.length && n < matrix[i].length) {
//            int tmpLength = 0;
//            while (tmpLength < length) {
//                if (matrix[m + tmpLength][n] == 0 || matrix[m][n + tmpLength] == 0) {
//                    System.out.println("m: " + m + " n: " + n);
//                    System.out.println("tmpLength: " + tmpLength);
//                    System.out.println("length: " + length);
////                    int x = maxLength + 1 - length;
//                    System.out.println("x: " + x);
//                    return x * x;
////                    result[i][j] = (char) ((length) * (length));
////                    break;
//                }
//                tmpLength++;
//            }
//            m++;
//            n++;
//            length--;
////            x++;
//        }
        return maxLength * maxLength;
    }
}
